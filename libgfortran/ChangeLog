2012-05-12  Tobias Burnus  <burnus@net-b.de>

	PR fortran/53310
	* intrinsics/eoshift2.c (eoshift2): Do not leak
	memory by allocating it in the loop.

2012-03-01  Release Manager

	* GCC 4.6.3 released.

2011-11-20  Andreas Tobler  <andreast@fgznet.ch>

	* configure: Regenerate.

2011-10-26  Release Manager

	* GCC 4.6.2 released.

2011-10-19  Janne Blomqvist  <jb@gcc.gnu.org>
	    Kai Tietz  <ktietz@redhat.com>
	    Tobias Burnus  <burnus@net-b.de>

	PR fortran/50016
	* io/unix.h (flush_sync): Add new libgfortran-internal prototype.
	* io/unix.c (flush_sync): New function, which calls sflush and
	on MinGW(-w64) also _commit.
	(flush_all_units, flush_all_units_1): Replace sflush/_commit by
	flush_sync.
	* io/file_pos.c (st_flush): Replace sflush/_commit by flush_sync.
	* io/intrinsics.c (flush_i4, flush_i8): Ditto.

2011-10-18  Tobias Burnus  <burnus@net-b.de>
	    Janne Blomqvist  <jb@gcc.gnu.org>

	PR fortran/50016
	* io/file_pos.c (st_flush): Call _commit on MinGW(-w64).
	* io/intrinsics.c (flush_i4, flush_i8): Ditto.
	* io/unix.c (flush_all_units_1, flush_all_units): Ditto.
	(buf_flush): Remove _commit call.
	* io/inquire.c (inquire_via_unit): Flush internal buffer
	and call file_length instead of invoking stat via file_size.

2011-09-11  Thomas Koenig  <tkoenig@gcc.gnu.org>

	Backport fron trunk
	PR fortran/49479
	* generated/m4/ifunction.m4:  Always call internal_malloc_size
	even when there is a zero-sized return array.
	* generated/generated/maxloc1_16_i16.c: Regenerated.
	* generated/generated/maxloc1_16_i1.c: Regenerated.
	* generated/generated/maxloc1_16_i2.c: Regenerated.
	* generated/generated/maxloc1_16_i4.c: Regenerated.
	* generated/generated/maxloc1_16_i8.c: Regenerated.
	* generated/generated/maxloc1_16_r10.c: Regenerated.
	* generated/generated/maxloc1_16_r16.c: Regenerated.
	* generated/generated/maxloc1_16_r4.c: Regenerated.
	* generated/generated/maxloc1_16_r8.c: Regenerated.
	* generated/generated/maxloc1_4_i16.c: Regenerated.
	* generated/generated/maxloc1_4_i1.c: Regenerated.
	* generated/generated/maxloc1_4_i2.c: Regenerated.
	* generated/generated/maxloc1_4_i4.c: Regenerated.
	* generated/generated/maxloc1_4_i8.c: Regenerated.
	* generated/generated/maxloc1_4_r10.c: Regenerated.
	* generated/generated/maxloc1_4_r16.c: Regenerated.
	* generated/generated/maxloc1_4_r4.c: Regenerated.
	* generated/generated/maxloc1_4_r8.c: Regenerated.
	* generated/generated/maxloc1_8_i16.c: Regenerated.
	* generated/generated/maxloc1_8_i1.c: Regenerated.
	* generated/generated/maxloc1_8_i2.c: Regenerated.
	* generated/generated/maxloc1_8_i4.c: Regenerated.
	* generated/generated/maxloc1_8_i8.c: Regenerated.
	* generated/generated/maxloc1_8_r10.c: Regenerated.
	* generated/generated/maxloc1_8_r16.c: Regenerated.
	* generated/generated/maxloc1_8_r4.c: Regenerated.
	* generated/generated/maxloc1_8_r8.c: Regenerated.
	* generated/generated/maxval_i16.c: Regenerated.
	* generated/generated/maxval_i1.c: Regenerated.
	* generated/generated/maxval_i2.c: Regenerated.
	* generated/generated/maxval_i4.c: Regenerated.
	* generated/generated/maxval_i8.c: Regenerated.
	* generated/generated/maxval_r10.c: Regenerated.
	* generated/generated/maxval_r16.c: Regenerated.
	* generated/generated/maxval_r4.c: Regenerated.
	* generated/generated/maxval_r8.c: Regenerated.
	* generated/generated/minloc1_16_i16.c: Regenerated.
	* generated/generated/minloc1_16_i1.c: Regenerated.
	* generated/generated/minloc1_16_i2.c: Regenerated.
	* generated/generated/minloc1_16_i4.c: Regenerated.
	* generated/generated/minloc1_16_i8.c: Regenerated.
	* generated/generated/minloc1_16_r10.c: Regenerated.
	* generated/generated/minloc1_16_r16.c: Regenerated.
	* generated/generated/minloc1_16_r4.c: Regenerated.
	* generated/generated/minloc1_16_r8.c: Regenerated.
	* generated/generated/minloc1_4_i16.c: Regenerated.
	* generated/generated/minloc1_4_i1.c: Regenerated.
	* generated/generated/minloc1_4_i2.c: Regenerated.
	* generated/generated/minloc1_4_i4.c: Regenerated.
	* generated/generated/minloc1_4_i8.c: Regenerated.
	* generated/generated/minloc1_4_r10.c: Regenerated.
	* generated/generated/minloc1_4_r16.c: Regenerated.
	* generated/generated/minloc1_4_r4.c: Regenerated.
	* generated/generated/minloc1_4_r8.c: Regenerated.
	* generated/generated/minloc1_8_i16.c: Regenerated.
	* generated/generated/minloc1_8_i1.c: Regenerated.
	* generated/generated/minloc1_8_i2.c: Regenerated.
	* generated/generated/minloc1_8_i4.c: Regenerated.
	* generated/generated/minloc1_8_i8.c: Regenerated.
	* generated/generated/minloc1_8_r10.c: Regenerated.
	* generated/generated/minloc1_8_r16.c: Regenerated.
	* generated/generated/minloc1_8_r4.c: Regenerated.
	* generated/generated/minloc1_8_r8.c: Regenerated.
	* generated/generated/minval_i16.c: Regenerated.
	* generated/generated/minval_i1.c: Regenerated.
	* generated/generated/minval_i2.c: Regenerated.
	* generated/generated/minval_i4.c: Regenerated.
	* generated/generated/minval_i8.c: Regenerated.
	* generated/generated/minval_r10.c: Regenerated.
	* generated/generated/minval_r16.c: Regenerated.
	* generated/generated/minval_r4.c: Regenerated.
	* generated/generated/minval_r8.c: Regenerated.
	* generated/generated/product_c10.c: Regenerated.
	* generated/generated/product_c16.c: Regenerated.
	* generated/generated/product_c4.c: Regenerated.
	* generated/generated/product_c8.c: Regenerated.
	* generated/generated/product_i16.c: Regenerated.
	* generated/generated/product_i1.c: Regenerated.
	* generated/generated/product_i2.c: Regenerated.
	* generated/generated/product_i4.c: Regenerated.
	* generated/generated/product_i8.c: Regenerated.
	* generated/generated/product_r10.c: Regenerated.
	* generated/generated/product_r16.c: Regenerated.
	* generated/generated/product_r4.c: Regenerated.
	* generated/generated/product_r8.c: Regenerated.
	* generated/generated/sum_c10.c: Regenerated.
	* generated/generated/sum_c16.c: Regenerated.
	* generated/generated/sum_c4.c: Regenerated.
	* generated/generated/sum_c8.c: Regenerated.
	* generated/generated/sum_i16.c: Regenerated.
	* generated/generated/sum_i1.c: Regenerated.
	* generated/generated/sum_i2.c: Regenerated.
	* generated/generated/sum_i4.c: Regenerated.
	* generated/generated/sum_i8.c: Regenerated.
	* generated/generated/sum_r10.c: Regenerated.
	* generated/generated/sum_r16.c: Regenerated.
	* generated/generated/sum_r4.c: Regenerated.
	* generated/generated/sum_r8.c: Regenerated.

2011-08-29  Thomas Koenig  <tkoenig@gcc.gnu.org>

	Backport from trunk
	PR libfortran/50192
	* intrinsics/string_intrinsics.c (memcmp_char4):  New function.
	* intrinsics/string_intrinsics_inc.c:  New macro MEMCMP, either
	set to memcmp or memcmp_char4.
	(compare_string):  Use MEMCMP, with correct size for it.
	* libgfortran.h:  Add prototype for memcmp_char4.

2011-08-19  Tobias Burnus  <burnus@net-b.de>

	PR fortran/50109
	* io/list_read.c (eat_separator): Fix skipping over "!" lines.

2011-07-27  Tobias Burnus  <burnus@net-b.de>

	Backport from mainline
	2011-07-23  Tobias Burnus  <burnus@net-b.de>

	PR fortran/49791
	* io/list_read.c (nml_parse_qualifier): Remove check to
	enabled extended read for another case.

2011-07-13  Janne Blomqvist  <jb@gcc.gnu.org>

	Backport from trunk:
	PR libfortran/49296
	* io/list_read.c (read_logical): Don't error out if a valid value
	is followed by EOF instead of a normal separator.
	(read_integer): Likewise.

2011-07-06  Thomas Koenig  <tkoenig@gcc.gnu.org>

	Partial backport from trunk:
	PR fortran/49479
	* runtime/memory.c:  If size is zero, allocate a single byte.
	* m4/eoshift1.m4:  Remove double allocation.
	* m4/eoshift3.m4:  Likewise.
	* generated/eoshift1_4.c:  Regenerated.
	* generated/eoshift1_8.c:  Regenerated.
	* generated/eoshift1_16.c:  Regenerated.
	* generated/eoshift3_4.c:  Regenerated.
	* generated/eoshift3_8.c:  Regenerated.
	* generated/eoshift3_16.c:  Regenerated.

2011-07-03  Janne Blomqvist  <jb@gcc.gnu.org>

	Backport from mainline:
	PR libfortran/49296
	* io/list_read.c (read_character): Accept EOF as a separator when
	reading string.

2011-06-27  Release Manager

	* GCC 4.6.1 released.

2011-04-30  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	Backport from mainline:
	PR libgfortran/48030
	* io/read.c (read_x): Re-implement using fbuf_getc.

2011-04-18  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47571
	* configure: Regenerated.
	* config.h.in: Regenerated.
	* acinclude.m4: Add alpha*-dec-osf* to gthread blacklist.
	* configure.ac: Use separate symbol for clock_gettime in librt.
	* intrinsics/system_clock.c: Use weakrefs only when needed and
	supported.

2011-03-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	Backport from mainline:
	2011-03-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	PR bootstrap/48135
	* configure.ac (gfortran_use_symver): Handle --disable-symvers.
	* configure: Regenerate.

2011-03-25  Release Manager

	* GCC 4.6.0 released.

2011-03-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	PR fortran/47571
	* intrinsics/system_clock.c [__alpha__ && __osf__]
	(HAVE_CLOCK_GETTIME): Undef.

2011-03-12  Thomas Koenig  <tkoenig@gcc.gnu.org>

	PR libfortran/48066
	* m4/ifunction.m4:  If return array is empty, return.
	* m4/ifunction_logical.m4:  Likewise.
	* generated/all_l16.c: Regenerated.
	* generated/all_l1.c: Regenerated.
	* generated/all_l2.c: Regenerated.
	* generated/all_l4.c: Regenerated.
	* generated/all_l8.c: Regenerated.
	* generated/any_l16.c: Regenerated.
	* generated/any_l1.c: Regenerated.
	* generated/any_l2.c: Regenerated.
	* generated/any_l4.c: Regenerated.
	* generated/any_l8.c: Regenerated.
	* generated/count_16_l.c: Regenerated.
	* generated/count_1_l.c: Regenerated.
	* generated/count_2_l.c: Regenerated.
	* generated/count_4_l.c: Regenerated.
	* generated/count_8_l.c: Regenerated.
	* generated/maxloc1_16_i16.c: Regenerated.
	* generated/maxloc1_16_i1.c: Regenerated.
	* generated/maxloc1_16_i2.c: Regenerated.
	* generated/maxloc1_16_i4.c: Regenerated.
	* generated/maxloc1_16_i8.c: Regenerated.
	* generated/maxloc1_16_r10.c: Regenerated.
	* generated/maxloc1_16_r16.c: Regenerated.
	* generated/maxloc1_16_r4.c: Regenerated.
	* generated/maxloc1_16_r8.c: Regenerated.
	* generated/maxloc1_4_i16.c: Regenerated.
	* generated/maxloc1_4_i1.c: Regenerated.
	* generated/maxloc1_4_i2.c: Regenerated.
	* generated/maxloc1_4_i4.c: Regenerated.
	* generated/maxloc1_4_i8.c: Regenerated.
	* generated/maxloc1_4_r10.c: Regenerated.
	* generated/maxloc1_4_r16.c: Regenerated.
	* generated/maxloc1_4_r4.c: Regenerated.
	* generated/maxloc1_4_r8.c: Regenerated.
	* generated/maxloc1_8_i16.c: Regenerated.
	* generated/maxloc1_8_i1.c: Regenerated.
	* generated/maxloc1_8_i2.c: Regenerated.
	* generated/maxloc1_8_i4.c: Regenerated.
	* generated/maxloc1_8_i8.c: Regenerated.
	* generated/maxloc1_8_r10.c: Regenerated.
	* generated/maxloc1_8_r16.c: Regenerated.
	* generated/maxloc1_8_r4.c: Regenerated.
	* generated/maxloc1_8_r8.c: Regenerated.
	* generated/maxval_i16.c: Regenerated.
	* generated/maxval_i1.c: Regenerated.
	* generated/maxval_i2.c: Regenerated.
	* generated/maxval_i4.c: Regenerated.
	* generated/maxval_i8.c: Regenerated.
	* generated/maxval_r10.c: Regenerated.
	* generated/maxval_r16.c: Regenerated.
	* generated/maxval_r4.c: Regenerated.
	* generated/maxval_r8.c: Regenerated.
	* generated/minloc1_16_i16.c: Regenerated.
	* generated/minloc1_16_i1.c: Regenerated.
	* generated/minloc1_16_i2.c: Regenerated.
	* generated/minloc1_16_i4.c: Regenerated.
	* generated/minloc1_16_i8.c: Regenerated.
	* generated/minloc1_16_r10.c: Regenerated.
	* generated/minloc1_16_r16.c: Regenerated.
	* generated/minloc1_16_r4.c: Regenerated.
	* generated/minloc1_16_r8.c: Regenerated.
	* generated/minloc1_4_i16.c: Regenerated.
	* generated/minloc1_4_i1.c: Regenerated.
	* generated/minloc1_4_i2.c: Regenerated.
	* generated/minloc1_4_i4.c: Regenerated.
	* generated/minloc1_4_i8.c: Regenerated.
	* generated/minloc1_4_r10.c: Regenerated.
	* generated/minloc1_4_r16.c: Regenerated.
	* generated/minloc1_4_r4.c: Regenerated.
	* generated/minloc1_4_r8.c: Regenerated.
	* generated/minloc1_8_i16.c: Regenerated.
	* generated/minloc1_8_i1.c: Regenerated.
	* generated/minloc1_8_i2.c: Regenerated.
	* generated/minloc1_8_i4.c: Regenerated.
	* generated/minloc1_8_i8.c: Regenerated.
	* generated/minloc1_8_r10.c: Regenerated.
	* generated/minloc1_8_r16.c: Regenerated.
	* generated/minloc1_8_r4.c: Regenerated.
	* generated/minloc1_8_r8.c: Regenerated.
	* generated/minval_i16.c: Regenerated.
	* generated/minval_i1.c: Regenerated.
	* generated/minval_i2.c: Regenerated.
	* generated/minval_i4.c: Regenerated.
	* generated/minval_i8.c: Regenerated.
	* generated/minval_r10.c: Regenerated.
	* generated/minval_r16.c: Regenerated.
	* generated/minval_r4.c: Regenerated.
	* generated/minval_r8.c: Regenerated.
	* generated/product_c10.c: Regenerated.
	* generated/product_c16.c: Regenerated.
	* generated/product_c4.c: Regenerated.
	* generated/product_c8.c: Regenerated.
	* generated/product_i16.c: Regenerated.
	* generated/product_i1.c: Regenerated.
	* generated/product_i2.c: Regenerated.
	* generated/product_i4.c: Regenerated.
	* generated/product_i8.c: Regenerated.
	* generated/product_r10.c: Regenerated.
	* generated/product_r16.c: Regenerated.
	* generated/product_r4.c: Regenerated.
	* generated/product_r8.c: Regenerated.
	* generated/sum_c10.c: Regenerated.
	* generated/sum_c16.c: Regenerated.
	* generated/sum_c4.c: Regenerated.
	* generated/sum_c8.c: Regenerated.
	* generated/sum_i16.c: Regenerated.
	* generated/sum_i1.c: Regenerated.
	* generated/sum_i2.c: Regenerated.
	* generated/sum_i4.c: Regenerated.
	* generated/sum_i8.c: Regenerated.
	* generated/sum_r10.c: Regenerated.
	* generated/sum_r16.c: Regenerated.
	* generated/sum_r4.c: Regenerated.
	* generated/sum_r8.c: Regenerated.

2011-03-11  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/48047
	* io/write_float.def (write_float): Change MIN_FIELD_WIDTH to 48.

2011-03-04  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47802
	* intrinsics/ctime.c (strctime): Use builtins to check localtime_r
	return type.

2011-03-04  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47802
	* intrinsics/ctime.c (strctime): Don't use return value of
	localtime_r.

2011-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47567
	* io/write_float.def (output_float): Move handling of w = 0 to after
	output rounding. Check for zero and set zero_flag accordingly. Set
	width according to zero_flag. Add better comments.

2011-02-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47778
	* io/list_read.c (namelist_read): Intialize the error string buffere.
	If pprev_nl was used during the previous namelist read and the rank
	was zero, reset the pointer to NULL for the next namelist read.

2011-02-26  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>

	PR libfortran/45165
	* unix.c (fallback_access): Fix file descriptor leaks.

2011-02-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>

	* acinclude.m4 (LIBGFOR_CHECK_FPSETMASK): Set shell variable
	tested in configure.host.
	* configure: Regenerate.

2011-02-24  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47802
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* configure.ac: Remove checks for ctime and ctime_r, add check for
	strftime.
	* intrinsics/date_and_time.c (localtime_r): Move fallback
	implementation to time_1.h.
	* intrinsics/time_1.h (localtime_r): Fallback implementation.
	* intrinsics/ctime.c: Include time_1.h.
	(ctime_r): Remove fallback implementation.
	(strctime): New function.
	(fdate): Use strctime instead of ctime_r.
	(fdate_sub): Likewise.
	(ctime): Likewise.
	(ctime_sub): Likewise.

2011-02-24  Jakub Jelinek  <jakub@redhat.com>

	PR fortran/47878
	* io/transfer.c (read_sf): Call fbuf_getptr only at the end,
	and subtract n, dtp->u.p.sf_seen_eor and seen_comma from it.

2011-02-24  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47802
	* configure.ac: Add test for POSIX getpwuid_r.
	* intrinsics/getlog.c (getlog): CPP test for
	HAVE_POSIX_GETPWUID_R.
	* config.h.in: Regenerated.
	* configure: Regenerated.

2011-02-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47567
	* io/write_float.def (output_float): Remove special case handling of
	zero with width 1.

2011-02-23  Janne Blomqvist  <jb@gcc.gnu.org>
	    Jerry DeLisle    <jvdelisle@gcc.gnu.org>

	PR libfortran/47694
	* io/fbuf.h (fbuf_getptr): New inline function.
	* io/transfer.c (read_sf): Use fbuf_getptr and fbuf_getc to scan
	through the string instead of fbuf_read.

2011-02-22  Tobias Burnus  <burnus@net-b.de>
	    Kai-Uwe Eckhardt  <kuehro@gmx.de>

	PR libfortran/47830
	* intrinsics/c99_functions.c (roundl): Make C valid for
	HAVE_NEXTAFTERL.

2011-02-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47567
	* io/write_float.def (output_float): Adjust width for F0.d to
	allow space for negative signs on zero.

2011-02-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47667
	* io/list_read.c (read_logical): Check for end of line before calling
	eat_line. (read_integer): Likewise. (parse_real): Don't unget the
	separator. Check for end of line before calling	eat_line.
	(read_complex): Allow line-end before and after parenthesis and comma.
	Check for end of line before calling eat_line. (read_real): Check for
	end of line before calling eat_line.

2011-02-16  Jakub Jelinek  <jakub@redhat.com>

	PR libfortran/47757
	* gfortran.map (GFORTRAN_1.4): Export
	_gfortran_{m,s}i{all,any,parity}_i{1,2,4,8,16} and
	_gfortran_{cshift0,eoshift{0,2}}_16_char4.

2011-02-15  Tobias Burnus  <burnus@net-b.de>

	PR fortran/47716
	PR fortran/47648
	* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Use check from
	libquadmath, which uses more features.
	* configure: Regenerate.

2011-02-14  Jakub Jelinek  <jakub@redhat.com>

	PR fortran/47642
	* io/write_float.def (DTOAQ): Use quadmath_snprintf instead of
	quadmath_flt128tostr.
	* io/transfer128.c (tmp2): Initialize to quadmath_snprintf instead
	of quadmath_flt128tostr.

2011-02-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>

	* Makefile.in: Regenerate.
	* aclocal.m4: Likewise.
	* configure: Likewise.

2011-02-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47567
	* io/write_float.def (output_float): Eliminate some redundant code.
	Adjust width for case of F0.X for values of zero and all other values.
	Expand cases where '*' is set to give cleaner results.

2011-02-05  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47571
	* intrinsics/time_1.h (GF_CLOCK_MONOTONIC): Move to system_clock.c.
	(weak_gettime): Likewise.
	(gf_gettime): Change API, move weak_gettime() usage to
	system_clock.c
	* intrinsics/system_clock.c (GTHREAD_USE_WEAK): Define.
	(gf_gettime_mono): New function.
	(system_clock_4): Use gf_gettime_mono().
	(system_clock_8): Likewise.
	* intrinsics/date_and_time.c (date_and_time): Update gf_gettime()
	usage.

2011-02-02  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47571
	* configure: Regenerated.
	* configure.ac: Don't add librt to LIBS.
	* intrinsics/time_1.h (weak_gettime): Weakref trickery for
	clock_gettime().
	(gf_gettime): Use weak_gettime() instead of clock_gettime().

2011-02-01  Janne Blomqvist  <jb@gcc.gnu.org>

	* intrinsics/time_1.h: Include errno.h needed by fallbacks.

2011-01-31  Janne Blomqvist  <jb@gcc.gnu.org>

	* intrinsics/time_1.h: Fix definition of GF_CLOCK_MONOTONIC macro.

2011-01-31  Janne Blomqvist  <jb@gcc.gnu.org>

	* configure.ac: Check for clock_gettime().
	* configure: Regenerated.
	* config.h.in: Regenerated.
	* intrinsics/time_1.h (__time_1): Rename to gf_cputime, add
	times() fallback.
	(gf_gettime): New function.
	* intrinsics/cpu_time.c (__cpu_time_1): Update to call gf_cputime.
	* intrinsics/date_and_time.c (date_and_time): Use gf_gettime.
	* intrinsics/dtime.c (dtime_sub): Use gf_cputime.
	* intrinsics/etime.c (etime_sub): Use gf_cputime.
	* intrinsics/system_clock.c (system_clock_4): Use gf_gettime.
	(system_clock_8): Use gf_gettime, increase count rate to allow
	nanosecond precision, remove overflow prone branch.

2011-01-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47434
	* io/write_float.def (write_infnan): Use calculate_sign to determine
	if the sign should be given and check field widths accordingly.

2011-01-29  Kai Tietz  <kai.tietz@onevision.com>

	* intrinsics/ctime.c (ctime_r): Improve implementation.

2011-01-27  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47431
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* configure.ac: Add check for ctime_r().
	* intrinsics/ctime.c (ctime_r): Fallback implementation.
	(fdate): Use ctime_r() instead of ctime().
	(fdate_sub): Likewise.
	(ctime): Likewise.
	(ctime_sub): Likewise.

2011-01-27  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47432
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* configure.ac: Add check for ttyname_r.
	* io/unix.h: Add TTY_NAME_MAX, change stream_ttyname prototype.
	* io/unix.c (stream_ttyname): Use ttyname_r if available, conform
	to new prototype.
	* io/inquire.c (inquire_via_unit): Use changed stream_ttyname.
	* io/intrinsics.c (ttynam_sub): Likewise.
	(ttynam): Likewise.

2011-01-27  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47491
	* configure.ac: Call AC_USE_SYSTEM_EXTENSIONS to enable common
	extensions.
	* config.h.in: Regenerate.
	* configure: Regenerate.

2011-01-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47285
	* io/write_float.def (write_infnan): Adjust processor selected width
	to 3 if NaN.

2011-01-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47285
	* io/write_float.def (output_float): Return SUCCESS or FAILURE and use
	the result to set the padding.

2011-01-26  Kai Tietz  <kai.tietz@onevision.com>

	* intrinsics/getlog.c (getlog): Fix label/statement issue.

2011-01-25  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47375
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* configure.ac: Add check for getpwuid_r.
	* intrinsics/getlog.c (getlog): Use getpwuid_r() if available.

2011-01-22  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/46267
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* configure.ac: Check presence of strerror_r.
	* intrinsics/gerror.c (gerror): Use gf_strerror, modify logic.
	* io/unix.c (get_oserror): Remove.
	* libgfortran.h (gf_strerror): Add prototype.
	(get_oserror): Remove prototype.
	* runtime/error.c (gf_strerror): New function.
	(os_error): Use gf_strerror instead of get_oserror.
	(generate_errror): Likewise.

2011-01-17  Janne Blomqvist  <jb@gcc.gnu.org>

	PR libfortran/47296
	* io/unix.c (tempfile): Set opp->file and opp->file_len also if an
	error occurs.

2011-01-16  Jakub Jelinek  <jakub@redhat.com>

	PR fortran/46625
	* io/write_float.def (DTOAQ): Use quadmath_flt128tostr
	instead of quadmath_dtoa.
	* io/transfer128.c (tmp1, tmp2): New variables, bring in
	strtoflt128 and quadmath_flt128tostr.
	(transfer_real128, transfer_real128_write, transfer_complex128,
	transfer_complex128_write): Remove tmp1/tmp2 variables.
	* io/read.c (convert_real): Use strtoflt128 instead of
	quadmath_strtopQ, adjust for the changed arguments and return
	value.

2011-01-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47296
	* io/unix.c (unpack_filename): Return non-zero if the filename passed
	in is NULL.

2011-01-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>

	PR libgfortran/47154
	* io/list_read.c (namelist_read): Remove calls to hit_eof to avoid the
	duplicate calls via next_record.


Copyright (C) 2011 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
